// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * Settings - структура для хранения настроек приложения
 */
export class Settings {
    /**
     * Creates a new Settings instance.
     * @param {Partial<Settings>} [$$source = {}] - The source object to create the Settings.
     */
    constructor($$source = {}) {
        if (!("width" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["width"] = 0;
        }
        if (!("height" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["height"] = 0;
        }
        if (!("language" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["language"] = "";
        }
        if (!("game_path" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["game_path"] = "";
        }
        if (!("first_run" in $$source)) {
            /**
             * NEW: Добавляем поле FirstRun
             * @member
             * @type {boolean}
             */
            this["first_run"] = false;
        }
        if (!("all_paths" in $$source)) {
            /**
             * NEW: Добавляем поле AllPaths
             * @member
             * @type {string[]}
             */
            this["all_paths"] = [];
        }
        if (!("theme" in $$source)) {
            /**
             * NEW: Добавляем поле Theme
             * @member
             * @type {string}
             */
            this["theme"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Settings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Settings}
     */
    static createFrom($$source = {}) {
        const $$createField5_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("all_paths" in $$parsedSource) {
            $$parsedSource["all_paths"] = $$createField5_0($$parsedSource["all_paths"]);
        }
        return new Settings(/** @type {Partial<Settings>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
