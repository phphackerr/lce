// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

/**
 * CheckConfigDiff сравнивает текущий конфиг в памяти с тем, что на диске,
 * возвращает map[section]map[key]value только с изменёнными значениями
 * @returns {$CancellablePromise<{ [_: string]: { [_: string]: { [_: string]: string } } }>}
 */
export function CheckConfigDiff() {
    return $Call.ByID(1212632879).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType2($result);
    }));
}

/**
 * Получить значение
 * @param {string} section
 * @param {string} option
 * @param {string} defaultValue
 * @returns {$CancellablePromise<string>}
 */
export function GetConfigValue(section, option, defaultValue) {
    return $Call.ByID(3859602141, section, option, defaultValue);
}

/**
 * Получить значение как Hotkey
 * @param {string} section
 * @param {string} option
 * @returns {$CancellablePromise<string>}
 */
export function GetHotkeyValue(section, option) {
    return $Call.ByID(3290418173, section, option);
}

/**
 * Проверить наличие
 * @returns {$CancellablePromise<boolean>}
 */
export function IsConfigAvailable() {
    return $Call.ByID(2384730431);
}

/**
 * Загрузить конфиг
 * @returns {$CancellablePromise<void>}
 */
export function LoadConfig() {
    return $Call.ByID(3318643048);
}

/**
 * Перезагрузить
 * @returns {$CancellablePromise<void>}
 */
export function ReloadConfig() {
    return $Call.ByID(2183266609);
}

/**
 * Установить значение
 * @param {string} section
 * @param {string} option
 * @param {string} value
 * @returns {$CancellablePromise<void>}
 */
export function SetConfigValue(section, option, value) {
    return $Call.ByID(3299114961, section, option, value);
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = $Create.Map($Create.Any, $$createType0);
const $$createType2 = $Create.Map($Create.Any, $$createType1);
