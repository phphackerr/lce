// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * I18N - это структура, которая будет привязана к фронтенду Wails
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

/**
 * GetCurrentLanguage возвращает текущий выбранный язык из настроек приложения.
 * @returns {$CancellablePromise<string>}
 */
export function GetCurrentLanguage() {
    return $Call.ByID(1410520876);
}

/**
 * GetLanguages возвращает список доступных языков.
 * Он сканирует директорию 'locales', читает JSON-файлы
 * и извлекает код языка (имя файла) и имя языка (из поля "lang_name" в JSON).
 * @returns {$CancellablePromise<{ [_: string]: string }[]>}
 */
export function GetLanguages() {
    return $Call.ByID(379549308).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType1($result);
    }));
}

/**
 * GetTranslations возвращает переводы для указанного кода языка.
 * @param {string} langCode
 * @returns {$CancellablePromise<{ [_: string]: string }>}
 */
export function GetTranslations(langCode) {
    return $Call.ByID(1103998873, langCode).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType0($result);
    }));
}

/**
 * GetTranslationsCurrent возвращает переводы для текущего выбранного языка.
 * @returns {$CancellablePromise<{ [_: string]: string }>}
 */
export function GetTranslationsCurrent() {
    return $Call.ByID(2358537334).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType0($result);
    }));
}

/**
 * SwitchLanguage изменяет текущий язык в настройках приложения и сохраняет их.
 * @param {string} newLang
 * @returns {$CancellablePromise<void>}
 */
export function SwitchLanguage(newLang) {
    return $Call.ByID(3885517577, newLang);
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = $Create.Array($$createType0);
