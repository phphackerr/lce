//@ts-nocheck
import { Events } from "@wailsio/runtime";
import {
  StartWatching,
  StopWatching,
} from "../../bindings/lce/backend/modules/config_watcher/configwatcher";
import { get } from "svelte/store";
import { isInternalChange } from "../store/internalChange";

let currentPath = null;

// --- API –¥–ª—è UI --- //
export function onConfigChanged(callback) {
  const listener = (event) => {
    const filePath = Array.isArray(event.data) ? event.data[0] : event.data;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    if (get(isInternalChange)) {
      console.log("‚ö° Internal config changed:", filePath);
      return;
    }

    // –í–Ω–µ—à–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log("‚ö° External config changed:", filePath);
    // Events.Emit("external-config-changed", filePath); // –¥–ª—è –±—ç–∫–∞
    callback(filePath);
  };

  Events.On("config-changed", listener);

  return {
    off: () => Events.Off("config-changed", listener),
  };
}

export async function startWatcher(path) {
  if (!path) return;

  if (currentPath) {
    try {
      await StopWatching();
      console.log("üõë Previous watcher stopped");
    } catch (err) {
      console.warn("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ—Ç—á–µ—Ä–∞:", err);
    } finally {
      currentPath = null;
    }
  }

  try {
    await StartWatching(path, 200);
    currentPath = path;
    console.log("üëÄ Watcher started for:", path);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ç—á–µ—Ä–∞:", err);
  }
}

export async function stopWatcher() {
  try {
    await StopWatching();
    console.log("üõë Watcher stopped");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ç—á–µ—Ä–∞:", err);
  } finally {
    currentPath = null;
  }
}
